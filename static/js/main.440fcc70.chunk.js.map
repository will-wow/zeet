{"version":3,"sources":["aframe/components/world-tracking-hack.ts","aframe/components/marker-mover.ts","aframe/components/raycaster-move.ts","aframe/components/place-on-click.ts","aframe/components/ar-shadows.ts","aframe/components/hide-in-ar-mode.ts","components/Assets.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AFRAME","registerComponent","init","this","el","sceneEl","renderer","xr","addEventListener","session","getSession","updateWorldTrackingState","schema","mark","type","events","event","data","setAttribute","target","raycaster","detail","tick","intersection","components","getIntersection","point","PlaceOnClickComponent","object","camera","shadowPlane","window","placeObject","getAttribute","x","y","z","object3D","position","set","cameraX","cameraZ","lookAt","ArShadowsComponent","opacity","default","exitVr","bind","enterVr","remove","removeEventListener","wasVisible","is","child","children","savedMaterial","material","ShadowMaterial","Assets","id","src","GlobalStyle","createGlobalStyle","App","world-tracking-hack","ar","raycaster-move","place-on-click","ar-raycaster","mark-mover","rotation","radius-inner","radius-outer","gltf-model","animation-mixer","shadow","geometry","ar-shadows","visible","light","environment","hide-in-ar-mode","align","wrap-count","value","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.440fcc70.chunk.js","sourcesContent":["import { CompDefinition } from \"./type\";\n\nexport const WorldTrackingHackComponent: CompDefinition = {\n  init() {\n    (this.el.sceneEl?.renderer?.xr as any)?.addEventListener(\n      \"sessionstart\",\n      () => {\n        const session = this.el.sceneEl?.renderer.xr.getSession();\n        if (!session.updateWorldTrackingState) {\n          session.updateWorldTrackingState = function () {};\n        }\n      }\n    );\n  },\n};\n\nAFRAME.registerComponent(\"world-tracking-hack\", WorldTrackingHackComponent);\n","import { DetailEvent, Entity } from \"aframe\";\n\nimport { CompDefinition } from \"./type\";\n\ninterface MarkMoverData {\n  mark: Entity;\n}\n\nexport const MarkMoverComponent: CompDefinition<MarkMoverData> = {\n  schema: {\n    mark: { type: \"selector\" },\n  },\n\n  events: {\n    \"raycaster-intersection\"(\n      event: DetailEvent<{ el: Entity; intersections: any[] }>\n    ) {\n      this.data.mark.setAttribute(\"color\", \"green\");\n    },\n\n    \"raycaster-intersection-cleared\"() {\n      this.data.mark.setAttribute(\"color\", \"red\");\n    },\n  },\n};\n\nAFRAME.registerComponent(\"mark-mover\", MarkMoverComponent);\n","import { DetailEvent, Entity, ObjectMap } from \"aframe\";\n\nimport { RaycasterComponent } from \"./raycaster\";\nimport { CompDefinition } from \"./type\";\n\ninterface RaycasterMoveState {\n  raycaster?: Entity<ObjectMap<RaycasterComponent>> | null;\n}\n\ninterface RaycasterMoveData {\n  target: Entity;\n}\n\nexport const RaycasterMoveComponent: CompDefinition<\n  RaycasterMoveData,\n  RaycasterMoveState\n> = {\n  schema: {\n    target: { type: \"selector\" },\n  },\n  events: {\n    \"raycaster-intersected\"(\n      event: DetailEvent<{\n        el: Entity<ObjectMap<RaycasterComponent>>;\n        intersections: any[];\n      }>\n    ) {\n      this.raycaster = event.detail.el;\n    },\n    \"raycaster-intersected-cleared\"() {\n      this.raycaster = null;\n    },\n  },\n  tick() {\n    if (!this.raycaster) {\n      return;\n    } // Not intersecting.\n\n    const intersection = this.raycaster.components.raycaster.getIntersection(\n      this.el\n    );\n    if (!intersection) {\n      return;\n    }\n\n    this.data.target.setAttribute(\"position\", intersection.point);\n  },\n};\n\nAFRAME.registerComponent(\"raycaster-move\", RaycasterMoveComponent);\n","import { Entity } from \"aframe\";\n\nimport { CompDefinition } from \"./type\";\n\ninterface MarkMoverData {\n  mark: Entity;\n  object: Entity;\n  camera: Entity;\n  shadowPlane: Entity;\n}\n\ninterface MarkMoverMethods {\n  placeObject(): void;\n}\n\nexport const PlaceOnClickComponent: CompDefinition<\n  MarkMoverData,\n  {},\n  MarkMoverMethods\n> = {\n  schema: {\n    mark: { type: \"selector\" },\n    object: { type: \"selector\" },\n    camera: { type: \"selector\" },\n    shadowPlane: { type: \"selector\" },\n  },\n  init() {\n    window.addEventListener(\"click\", () => this.placeObject());\n  },\n  placeObject() {\n    const { x, y, z } = this.data.mark.getAttribute(\"position\");\n    this.data.object.object3D.position.set(x, y, z);\n    this.data.shadowPlane.object3D.position.set(x, y, z);\n\n    const { x: cameraX, z: cameraZ } = this.data.camera.getAttribute(\n      \"position\"\n    );\n\n    this.data.object.object3D.lookAt(cameraX, y, cameraZ);\n\n    this.data.object.setAttribute(\"visible\", true);\n  },\n};\n\nAFRAME.registerComponent(\"place-on-click\", PlaceOnClickComponent);\n","import { ShadowMaterial, Object3D, Material } from \"three\";\n\nimport { CompDefinition } from \"./type\";\n\ninterface HideInArModeData {\n  opacity: number;\n}\n\ninterface HideInArModeState {\n  wasVisible: boolean;\n  savedMaterial: Material | null;\n}\n\ninterface HideInArModeMethods {\n  enterVr(): void;\n  exitVr(): void;\n}\n\ntype Object3DWithMaterial = Object3D & { material: Material };\n\nexport const ArShadowsComponent: CompDefinition<\n  HideInArModeData,\n  HideInArModeState,\n  HideInArModeMethods\n> = {\n  // Swap an object's material to a transparent shadows-only material while\n  // in AR mode. Intended for use with a ground plane. The object is also\n  // set visible while in AR mode, this is useful if it's hidden in other\n  // modes due to them using a 3D environment.\n  schema: {\n    opacity: { type: \"number\", default: 0.3 },\n  },\n  init: function () {\n    this.exitVr = this.exitVr.bind(this);\n    this.enterVr = this.enterVr.bind(this);\n\n    this.el.sceneEl?.addEventListener(\"enter-vr\", this.enterVr);\n    this.el.sceneEl?.addEventListener(\"exit-vr\", this.exitVr);\n  },\n\n  remove() {\n    this.el.sceneEl?.removeEventListener(\"enter-vr\", this.enterVr);\n    this.el.sceneEl?.removeEventListener(\"exit-vr\", this.exitVr);\n  },\n\n  enterVr() {\n    this.wasVisible = this.el.getAttribute(\"visible\");\n    if (this.el.sceneEl?.is(\"ar-mode\")) {\n      const child = this.el.object3D.children[0] as Object3DWithMaterial;\n\n      this.savedMaterial = child.material;\n      child.material = new ShadowMaterial();\n      child.material.opacity = this.data.opacity;\n      this.el.setAttribute(\"visible\", true);\n    }\n  },\n\n  exitVr() {\n    if (this.savedMaterial) {\n      const child = this.el.object3D.children[0] as Object3DWithMaterial;\n\n      child.material = this.savedMaterial;\n      this.savedMaterial = null;\n    }\n    if (!this.wasVisible) this.el.setAttribute(\"visible\", false);\n  },\n};\n\nAFRAME.registerComponent(\"ar-shadows\", ArShadowsComponent);\n","import { CompDefinition } from \"./type\";\n\ninterface HideInArModeState {\n  wasVisible: boolean;\n}\n\ninterface HideInArModeMethods {\n  enterVr(): void;\n  exitVr(): void;\n}\n\nexport const HideInArModeComponent: CompDefinition<\n  {},\n  HideInArModeState,\n  HideInArModeMethods\n> = {\n  // Set this object invisible while in AR mode.\n  init() {\n    this.exitVr = this.exitVr.bind(this);\n    this.enterVr = this.enterVr.bind(this);\n\n    this.el.sceneEl?.addEventListener(\"enter-vr\", this.enterVr);\n    this.el.sceneEl?.addEventListener(\"exit-vr\", this.exitVr);\n  },\n\n  remove() {\n    this.el.sceneEl?.removeEventListener(\"enter-vr\", this.enterVr);\n    this.el.sceneEl?.removeEventListener(\"exit-vr\", this.exitVr);\n  },\n\n  enterVr() {\n    this.wasVisible = this.el.getAttribute(\"visible\");\n    if (this.el.sceneEl?.is(\"ar-mode\")) {\n      this.el.setAttribute(\"visible\", false);\n    }\n  },\n\n  exitVr() {\n    if (this.wasVisible) this.el.setAttribute(\"visible\", true);\n  },\n};\n\nAFRAME.registerComponent(\"hide-in-ar-mode\", HideInArModeComponent);\n","import React from \"react\";\n\nconst Assets: React.FunctionComponent = () => {\n  return (\n    <a-assets>\n      <a-asset-item id=\"zeet\" src=\"assets/zeet.glb\"></a-asset-item>\n    </a-assets>\n  );\n};\n\nexport default Assets;\n","import React from \"react\";\nimport { Scene, Entity } from \"aframe-react\";\nimport { createGlobalStyle } from \"styled-components\";\n\nimport Assets from \"./components/Assets\";\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    font-family: 'Open Sans', sans-serif;\n  }\n`;\n\nconst App: React.FunctionComponent = () => {\n  return (\n    <>\n      <GlobalStyle />\n      <Scene\n        world-tracking-hack\n        ar=\"worldSensing: true\"\n        raycaster-move=\"target:#mark\"\n        place-on-click=\"mark: #mark; object: #object; shadowPlane: #shadow-plane; camera: #camera\"\n      >\n        <Assets />\n\n        <Entity\n          ar-raycaster=\"\"\n          raycaster=\"objects: none\"\n          mark-mover=\"mark: #mark\"\n        />\n\n        <a-ring\n          id=\"mark\"\n          rotation=\"-90 0 0\"\n          radius-inner=\"0.01\"\n          radius-outer=\"0.02\"\n        ></a-ring>\n\n        <Entity\n          id=\"object\"\n          position=\"0 0 -2\"\n          gltf-model=\"#zeet\"\n          animation-mixer=\"clip: Idle\"\n          shadow=\"receive: false; cast: true\"\n        />\n\n        <Entity\n          id=\"shadow-plane\"\n          geometry=\"primitive: plane; height: 1; width: 1\"\n          rotation=\"-90 0 0\"\n          shadow=\"receive: true; cast: false\"\n          ar-shadows=\"opacity: 0.3\"\n          visible=\"false\"\n        />\n\n        <Entity id=\"ambient-light\" light=\"type: ambient; intensity: 0.5;\" />\n\n        <a-light\n          id=\"directional-light\"\n          type=\"directional\"\n          light=\"castShadow: true;\n                 shadowMapHeight: 1024;\n                 shadowMapWidth: 1024;\n                 shadowCameraLeft: -7;\n                 shadowCameraRight: 5;\n                 shadowCameraBottom: -5;\n                 shadowCameraTop: 5;\"\n          target=\"dino\"\n          position=\"-5 3 1.5\"\n        />\n\n        <Entity\n          id=\"environment\"\n          environment=\"preset: forest; lighting: none; shadow: none; lightPosition: 0 2.15 0\"\n          hide-in-ar-mode\n        />\n\n        <a-camera id=\"camera\">\n          <a-text\n            id=\"hud\"\n            align=\"center\"\n            wrap-count=\"800\"\n            position=\"0 -0.1 -0.25\"\n            value=\"move phone from side to side\"\n          ></a-text>\n        </a-camera>\n      </Scene>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"aframe-extras\";\nimport \"aframe-environment-component\";\nimport \"aframe-layout-component\";\nimport \"aframe-look-at-component\";\n\nimport \"./aframe/components/world-tracking-hack\";\nimport \"./aframe/components/marker-mover\";\nimport \"./aframe/components/raycaster-move\";\nimport \"./aframe/components/place-on-click\";\nimport \"./aframe/components/ar-shadows\";\nimport \"./aframe/components/hide-in-ar-mode\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}