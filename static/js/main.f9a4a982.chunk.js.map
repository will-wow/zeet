{"version":3,"sources":["aframe/components/world-tracking-hack.ts","aframe/components/marker-mover.ts","aframe/components/raycaster-move.ts","aframe/components/place-on-click.ts","aframe/components/ar-shadows.ts","aframe/components/hide-in-ar-mode.ts","aframe/components/face-api.ts","components/Assets.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AFRAME","registerComponent","init","this","el","sceneEl","renderer","xr","addEventListener","session","getSession","updateWorldTrackingState","schema","mark","type","events","event","data","setAttribute","target","raycaster","detail","tick","intersection","components","getIntersection","point","PlaceOnClickComponent","object","camera","shadowPlane","window","is","placeObject","getAttribute","x","y","z","object3D","position","set","cameraX","cameraZ","lookAt","ArShadowsComponent","opacity","default","exitVr","bind","enterVr","remove","removeEventListener","wasVisible","child","children","savedMaterial","material","ShadowMaterial","ar","vr","MODELS_DIRECTORY","process","faceDetectorOptions","faceapi","FaceApiComponent","hud","setExpression","video","document","querySelector","Promise","all","loadModels","connectCamera","then","getExpression","setInterval","expression","clip","a","tinyFaceDetector","loadFromUri","faceExpressionNet","withFaceExpressions","detection","expressions","asSortedArray","navigator","mediaDevices","getUserMedia","facingMode","stream","srcObject","resolve","zeetAsset","Assets","id","src","GlobalStyle","createGlobalStyle","App","autoPlay","muted","playsInline","world-tracking-hack","raycaster-move","place-on-click","face-api","ar-raycaster","mark-mover","rotation","radius-inner","radius-outer","gltf-model","animation-mixer","shadow","visible","geometry","ar-shadows","light","environment","hide-in-ar-mode","align","wrap-count","value","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8PAgBAA,OAAOC,kBAAkB,sBAdiC,CACxDC,KADwD,WAChD,IAAD,aACL,QAAC,EAAD,UAACC,KAAKC,GAAGC,eAAT,iBAAC,EAAiBC,gBAAlB,aAAC,EAA2BC,UAA5B,SAAwCC,iBACtC,gBACA,WAAO,IAAD,EACEC,EAAO,UAAG,EAAKL,GAAGC,eAAX,aAAG,EAAiBC,SAASC,GAAGG,aACxCD,EAAQE,2BACXF,EAAQE,yBAA2B,oBCiB7CX,OAAOC,kBAAkB,aAlBwC,CAC/DW,OAAQ,CACNC,KAAM,CAAEC,KAAM,aAGhBC,OAAQ,CACN,yBADM,SAEJC,GAEAb,KAAKc,KAAKJ,KAAKK,aAAa,QAAS,UAGvC,iCAPM,WAQJf,KAAKc,KAAKJ,KAAKK,aAAa,QAAS,WC4B3ClB,OAAOC,kBAAkB,iBAjCrB,CACFW,OAAQ,CACNO,OAAQ,CAAEL,KAAM,aAElBC,OAAQ,CACN,wBADM,SAEJC,GAKAb,KAAKiB,UAAYJ,EAAMK,OAAOjB,IAEhC,gCATM,WAUJD,KAAKiB,UAAY,OAGrBE,KAjBE,WAkBA,GAAKnB,KAAKiB,UAAV,CAIA,IAAMG,EAAepB,KAAKiB,UAAUI,WAAWJ,UAAUK,gBACvDtB,KAAKC,IAEFmB,GAILpB,KAAKc,KAAKE,OAAOD,aAAa,WAAYK,EAAaG,WC9BpD,IAAMC,EAIT,CACFf,OAAQ,CACNC,KAAM,CAAEC,KAAM,YACdc,OAAQ,CAAEd,KAAM,YAChBe,OAAQ,CAAEf,KAAM,YAChBgB,YAAa,CAAEhB,KAAM,aAEvBZ,KAPE,WAOM,IAAD,OACL6B,OAAOvB,iBAAiB,SAAS,WAAO,IAAD,GACrC,UAAI,EAAKJ,GAAGC,eAAZ,aAAI,EAAiB2B,GAAG,aACtB,EAAKC,kBAIXA,YAdE,WAca,IAAD,EACQ9B,KAAKc,KAAKJ,KAAKqB,aAAa,YAAxCC,EADI,EACJA,EAAGC,EADC,EACDA,EAAGC,EADF,EACEA,EACdlC,KAAKc,KAAKW,OAAOU,SAASC,SAASC,IAAIL,EAAGC,EAAGC,GAC7ClC,KAAKc,KAAKa,YAAYQ,SAASC,SAASC,IAAIL,EAAGC,EAAGC,GAHtC,MAKuBlC,KAAKc,KAAKY,OAAOK,aAClD,YADSO,EALC,EAKJN,EAAeO,EALX,EAKQL,EAIpBlC,KAAKc,KAAKW,OAAOU,SAASK,OAAOF,EAASL,EAAGM,GAE7CvC,KAAKc,KAAKW,OAAOV,aAAa,WAAW,KAI7ClB,OAAOC,kBAAkB,iBAAkB0B,G,YC5B9BiB,EAIT,CAKFhC,OAAQ,CACNiC,QAAS,CAAE/B,KAAM,SAAUgC,QAAS,KAEtC5C,KAAM,WAAa,IAAD,IAChBC,KAAK4C,OAAS5C,KAAK4C,OAAOC,KAAK7C,MAC/BA,KAAK8C,QAAU9C,KAAK8C,QAAQD,KAAK7C,MAEjC,UAAAA,KAAKC,GAAGC,eAAR,SAAiBG,iBAAiB,WAAYL,KAAK8C,SACnD,UAAA9C,KAAKC,GAAGC,eAAR,SAAiBG,iBAAiB,UAAWL,KAAK4C,SAGpDG,OAhBE,WAgBQ,IAAD,IACP,UAAA/C,KAAKC,GAAGC,eAAR,SAAiB8C,oBAAoB,WAAYhD,KAAK8C,SACtD,UAAA9C,KAAKC,GAAGC,eAAR,SAAiB8C,oBAAoB,UAAWhD,KAAK4C,SAGvDE,QArBE,WAqBS,IAAD,EAER,GADA9C,KAAKiD,WAAajD,KAAKC,GAAG8B,aAAa,WACvC,UAAI/B,KAAKC,GAAGC,eAAZ,aAAI,EAAiB2B,GAAG,WAAY,CAClC,IAAMqB,EAAQlD,KAAKC,GAAGkC,SAASgB,SAAS,GAExCnD,KAAKoD,cAAgBF,EAAMG,SAC3BH,EAAMG,SAAW,IAAIC,IACrBJ,EAAMG,SAASX,QAAU1C,KAAKc,KAAK4B,QACnC1C,KAAKC,GAAGc,aAAa,WAAW,KAIpC6B,OAjCE,WAkCI5C,KAAKoD,gBACOpD,KAAKC,GAAGkC,SAASgB,SAAS,GAElCE,SAAWrD,KAAKoD,cACtBpD,KAAKoD,cAAgB,MAElBpD,KAAKiD,YAAYjD,KAAKC,GAAGc,aAAa,WAAW,KAI1DlB,OAAOC,kBAAkB,aAAc2C,GCtBvC5C,OAAOC,kBAAkB,eA/BrB,CACFW,OAAQ,CACN8C,GAAI,CAAE5C,KAAM,UAAWgC,SAAS,GAChCa,GAAI,CAAE7C,KAAM,UAAWgC,SAAS,IAGlC5C,KANE,WAMM,IAAD,IACLC,KAAK4C,OAAS5C,KAAK4C,OAAOC,KAAK7C,MAC/BA,KAAK8C,QAAU9C,KAAK8C,QAAQD,KAAK7C,MAEjC,UAAAA,KAAKC,GAAGC,eAAR,SAAiBG,iBAAiB,WAAYL,KAAK8C,SACnD,UAAA9C,KAAKC,GAAGC,eAAR,SAAiBG,iBAAiB,UAAWL,KAAK4C,SAGpDG,OAdE,WAcQ,IAAD,IACP,UAAA/C,KAAKC,GAAGC,eAAR,SAAiB8C,oBAAoB,WAAYhD,KAAK8C,SACtD,UAAA9C,KAAKC,GAAGC,eAAR,SAAiB8C,oBAAoB,UAAWhD,KAAK4C,SAGvDE,QAnBE,WAmBS,IAAD,EACR9C,KAAKiD,WAAajD,KAAKC,GAAG8B,aAAa,YACvC,UAAI/B,KAAKC,GAAGC,eAAZ,aAAI,EAAiB2B,GAAG,aACtB7B,KAAKC,GAAGc,aAAa,WAAW,IAIpC6B,OA1BE,WA2BI5C,KAAKiD,YAAYjD,KAAKC,GAAGc,aAAa,WAAW,M,mCCjBnD0C,EAAgB,UAAMC,GAAN,kBAGhBC,EAAsB,IAAIC,IAEnBC,EAIT,CACFpD,OAAQ,CACNgB,OAAQ,CAAEd,KAAM,YAChBmD,IAAK,CAAEnD,KAAM,aAEfZ,KALE,WAKM,IAAD,OACLC,KAAK+D,cAAgB/D,KAAK+D,cAAclB,KAAK7C,MAE7C,IAAMgE,EAASC,SAASC,cACtB,UAGFC,QAAQC,IAAI,CAACC,IAAcC,EAAcN,KAASO,MAAK,WACrD,EAAKzD,KAAKW,OAAOV,aAAa,WAAW,GACzC,EAAKD,KAAKgD,IAAI/C,aAAa,QAAS,gCAGpCyD,EAAcR,GAAOO,KAAK,EAAKR,eAG/BU,aACE,kBAAMD,EAAcR,GAAOO,KAAK,EAAKR,iBA7BN,SAmCrCA,cA3BE,SA2BYW,GACZ,IAAMC,EAAsB,UAAfD,EAAyB,OAAS,OAC/C1E,KAAKc,KAAKW,OAAOV,aAAa,kBAAmB,CAAE4D,WAIjDN,EAAU,uCAAG,sBAAAO,EAAA,sEACXT,QAAQC,IAAI,CAChBR,IAAaiB,iBAAiBC,YAAYrB,GAC1CG,IAAamB,kBAAkBD,YAAYrB,KAH5B,2CAAH,qDAOVe,EAAa,uCAAG,WACpBR,GADoB,iBAAAY,EAAA,sEAGIhB,IACJI,EAAOL,GACxBqB,sBALiB,cAGdC,EAHc,OAOdP,EAPc,OAODO,QAPC,IAODA,OAPC,EAODA,EAAWC,YAAYC,gBAAgB,GAPtC,mBASb,OAACT,QAAD,IAACA,OAAD,EAACA,EAAYA,aAAiC,MATjC,2CAAH,sDAYbJ,EAAa,uCAAG,WAAON,GAAP,SAAAY,EAAA,sEACdQ,UAAUC,aACbC,aAAa,CAAEtB,MAAO,CAAEuB,WAAY,UACpChB,MAAK,SAACiB,GAEL,OADAxB,EAAMyB,UAAYD,EACX,eALS,gCAQb,IAAIrB,SAAQ,SAACuB,GAClB1B,EAAM3D,iBAAiB,cAAc,kBAAMqF,WATzB,2CAAH,sDAanB7F,OAAOC,kBAAkB,WAAY+D,G,2BCjG/B8B,EAAS,UAAMjC,GAAN,0BAUAkC,EARyB,WACtC,OACE,kCACE,kCAAcC,GAAG,OAAOC,IAAKH,M,iICDnC,IAAMI,EAAcC,YAAH,KAuFFC,EAjFsB,WACnC,OACE,oCACE,kBAACF,EAAD,MACA,2BAAOF,GAAG,QAAQK,UAAQ,EAACC,OAAK,EAACC,aAAW,IAC5C,kBAAC,QAAD,CACEC,uBAAA,EACA9C,GAAG,qBACH+C,iBAAe,eACfC,iBAAe,4EACfC,WAAS,8BAET,kBAAC,EAAD,MAEA,kBAAC,SAAD,CACEC,eAAa,GACbxF,UAAU,gBACVyF,aAAW,gBAGb,4BACEb,GAAG,OACHc,SAAS,UACTC,eAAa,OACbC,eAAa,SAGf,kBAAC,SAAD,CACEhB,GAAG,SACHzD,SAAS,SACT0E,aAAW,QACXC,kBAAgB,aAChBC,OAAO,6BACPC,QAAQ,UAGV,kBAAC,SAAD,CACEpB,GAAG,eACHqB,SAAS,wCACTP,SAAS,UACTK,OAAO,6BACPG,aAAW,eACXF,QAAQ,UAGV,kBAAC,SAAD,CAAQpB,GAAG,gBAAgBuB,MAAM,mCAEjC,6BACEvB,GAAG,oBACHlF,KAAK,cACLyG,MAAM,yJAONpG,OAAO,OACPoB,SAAS,aAGX,kBAAC,SAAD,CACEyD,GAAG,cACHwB,YAAY,wEACZC,mBAAA,IAGF,8BAAUzB,GAAG,UACX,4BACEA,GAAG,MACH0B,MAAM,SACNC,aAAW,MACXpF,SAAS,eACTqF,MAAM,mBCzEEC,QACW,cAA7B9F,OAAO+F,SAASC,UAEe,UAA7BhG,OAAO+F,SAASC,UAEhBhG,OAAO+F,SAASC,SAASC,MACvB,2DCCNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF/D,SAASgE,eAAe,SDiHpB,kBAAmB7C,WACrBA,UAAU8C,cAAcC,MACrB5D,MAAK,SAAC6D,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f9a4a982.chunk.js","sourcesContent":["import { CompDefinition } from \"./type\";\n\nexport const WorldTrackingHackComponent: CompDefinition = {\n  init() {\n    (this.el.sceneEl?.renderer?.xr as any)?.addEventListener(\n      \"sessionstart\",\n      () => {\n        const session = this.el.sceneEl?.renderer.xr.getSession();\n        if (!session.updateWorldTrackingState) {\n          session.updateWorldTrackingState = function () {};\n        }\n      }\n    );\n  },\n};\n\nAFRAME.registerComponent(\"world-tracking-hack\", WorldTrackingHackComponent);\n","import { DetailEvent, Entity } from \"aframe\";\n\nimport { CompDefinition } from \"./type\";\n\ninterface MarkMoverData {\n  mark: Entity;\n}\n\nexport const MarkMoverComponent: CompDefinition<MarkMoverData> = {\n  schema: {\n    mark: { type: \"selector\" },\n  },\n\n  events: {\n    \"raycaster-intersection\"(\n      event: DetailEvent<{ el: Entity; intersections: any[] }>\n    ) {\n      this.data.mark.setAttribute(\"color\", \"green\");\n    },\n\n    \"raycaster-intersection-cleared\"() {\n      this.data.mark.setAttribute(\"color\", \"red\");\n    },\n  },\n};\n\nAFRAME.registerComponent(\"mark-mover\", MarkMoverComponent);\n","import { DetailEvent, Entity, ObjectMap } from \"aframe\";\n\nimport { RaycasterComponent } from \"./raycaster\";\nimport { CompDefinition } from \"./type\";\n\ninterface RaycasterMoveState {\n  raycaster?: Entity<ObjectMap<RaycasterComponent>> | null;\n}\n\ninterface RaycasterMoveData {\n  target: Entity;\n}\n\nexport const RaycasterMoveComponent: CompDefinition<\n  RaycasterMoveData,\n  RaycasterMoveState\n> = {\n  schema: {\n    target: { type: \"selector\" },\n  },\n  events: {\n    \"raycaster-intersected\"(\n      event: DetailEvent<{\n        el: Entity<ObjectMap<RaycasterComponent>>;\n        intersections: any[];\n      }>\n    ) {\n      this.raycaster = event.detail.el;\n    },\n    \"raycaster-intersected-cleared\"() {\n      this.raycaster = null;\n    },\n  },\n  tick() {\n    if (!this.raycaster) {\n      return;\n    } // Not intersecting.\n\n    const intersection = this.raycaster.components.raycaster.getIntersection(\n      this.el\n    );\n    if (!intersection) {\n      return;\n    }\n\n    this.data.target.setAttribute(\"position\", intersection.point);\n  },\n};\n\nAFRAME.registerComponent(\"raycaster-move\", RaycasterMoveComponent);\n","import { Entity } from \"aframe\";\n\nimport { CompDefinition } from \"./type\";\n\ninterface MarkMoverData {\n  mark: Entity;\n  object: Entity;\n  camera: Entity;\n  shadowPlane: Entity;\n}\n\ninterface MarkMoverMethods {\n  placeObject(): void;\n}\n\nexport const PlaceOnClickComponent: CompDefinition<\n  MarkMoverData,\n  {},\n  MarkMoverMethods\n> = {\n  schema: {\n    mark: { type: \"selector\" },\n    object: { type: \"selector\" },\n    camera: { type: \"selector\" },\n    shadowPlane: { type: \"selector\" },\n  },\n  init() {\n    window.addEventListener(\"click\", () => {\n      if (this.el.sceneEl?.is(\"ar-mode\")) {\n        this.placeObject();\n      }\n    });\n  },\n  placeObject() {\n    const { x, y, z } = this.data.mark.getAttribute(\"position\");\n    this.data.object.object3D.position.set(x, y, z);\n    this.data.shadowPlane.object3D.position.set(x, y, z);\n\n    const { x: cameraX, z: cameraZ } = this.data.camera.getAttribute(\n      \"position\"\n    );\n\n    this.data.object.object3D.lookAt(cameraX, y, cameraZ);\n\n    this.data.object.setAttribute(\"visible\", true);\n  },\n};\n\nAFRAME.registerComponent(\"place-on-click\", PlaceOnClickComponent);\n","import { ShadowMaterial, Object3D, Material } from \"three\";\n\nimport { CompDefinition } from \"./type\";\n\ninterface HideInArModeData {\n  opacity: number;\n}\n\ninterface HideInArModeState {\n  wasVisible: boolean;\n  savedMaterial: Material | null;\n}\n\ninterface HideInArModeMethods {\n  enterVr(): void;\n  exitVr(): void;\n}\n\ntype Object3DWithMaterial = Object3D & { material: Material };\n\nexport const ArShadowsComponent: CompDefinition<\n  HideInArModeData,\n  HideInArModeState,\n  HideInArModeMethods\n> = {\n  // Swap an object's material to a transparent shadows-only material while\n  // in AR mode. Intended for use with a ground plane. The object is also\n  // set visible while in AR mode, this is useful if it's hidden in other\n  // modes due to them using a 3D environment.\n  schema: {\n    opacity: { type: \"number\", default: 0.3 },\n  },\n  init: function () {\n    this.exitVr = this.exitVr.bind(this);\n    this.enterVr = this.enterVr.bind(this);\n\n    this.el.sceneEl?.addEventListener(\"enter-vr\", this.enterVr);\n    this.el.sceneEl?.addEventListener(\"exit-vr\", this.exitVr);\n  },\n\n  remove() {\n    this.el.sceneEl?.removeEventListener(\"enter-vr\", this.enterVr);\n    this.el.sceneEl?.removeEventListener(\"exit-vr\", this.exitVr);\n  },\n\n  enterVr() {\n    this.wasVisible = this.el.getAttribute(\"visible\");\n    if (this.el.sceneEl?.is(\"ar-mode\")) {\n      const child = this.el.object3D.children[0] as Object3DWithMaterial;\n\n      this.savedMaterial = child.material;\n      child.material = new ShadowMaterial();\n      child.material.opacity = this.data.opacity;\n      this.el.setAttribute(\"visible\", true);\n    }\n  },\n\n  exitVr() {\n    if (this.savedMaterial) {\n      const child = this.el.object3D.children[0] as Object3DWithMaterial;\n\n      child.material = this.savedMaterial;\n      this.savedMaterial = null;\n    }\n    if (!this.wasVisible) this.el.setAttribute(\"visible\", false);\n  },\n};\n\nAFRAME.registerComponent(\"ar-shadows\", ArShadowsComponent);\n","import { CompDefinition } from \"./type\";\n\ninterface HideInArModeState {\n  wasVisible: boolean;\n}\n\ninterface HideInArModeMethods {\n  enterVr(): void;\n  exitVr(): void;\n}\n\nexport const HideInModeComponent: CompDefinition<\n  {},\n  HideInArModeState,\n  HideInArModeMethods\n> = {\n  schema: {\n    ar: { type: \"boolean\", default: false },\n    vr: { type: \"boolean\", default: false },\n  },\n  // Set this object invisible while in AR mode.\n  init() {\n    this.exitVr = this.exitVr.bind(this);\n    this.enterVr = this.enterVr.bind(this);\n\n    this.el.sceneEl?.addEventListener(\"enter-vr\", this.enterVr);\n    this.el.sceneEl?.addEventListener(\"exit-vr\", this.exitVr);\n  },\n\n  remove() {\n    this.el.sceneEl?.removeEventListener(\"enter-vr\", this.enterVr);\n    this.el.sceneEl?.removeEventListener(\"exit-vr\", this.exitVr);\n  },\n\n  enterVr() {\n    this.wasVisible = this.el.getAttribute(\"visible\");\n    if (this.el.sceneEl?.is(\"ar-mode\")) {\n      this.el.setAttribute(\"visible\", false);\n    }\n  },\n\n  exitVr() {\n    if (this.wasVisible) this.el.setAttribute(\"visible\", true);\n  },\n};\n\nAFRAME.registerComponent(\"hide-in-mode\", HideInModeComponent);\n","import { Entity } from \"aframe\";\nimport * as faceapi from \"face-api.js\";\n\nimport { CompDefinition } from \"./type\";\n\nexport type FaceExpression =\n  | \"neutral\"\n  | \"happy\"\n  | \"sad\"\n  | \"angry\"\n  | \"fearful\"\n  | \"disgusted\"\n  | \"surprised\";\n\ninterface FaceApiData {\n  object: Entity;\n  hud: Entity;\n}\n\ninterface FaceApiState {}\n\ninterface FaceApiMethods {\n  setExpression(expression: FaceExpression | null): void;\n}\n\nconst MODELS_DIRECTORY = `${process.env.PUBLIC_URL}/assets/models`;\nexport const DEFAULT_DETECTIONS_TIME = 1000;\n\nconst faceDetectorOptions = new faceapi.TinyFaceDetectorOptions();\n\nexport const FaceApiComponent: CompDefinition<\n  FaceApiData,\n  FaceApiState,\n  FaceApiMethods\n> = {\n  schema: {\n    object: { type: \"selector\" },\n    hud: { type: \"selector\" },\n  },\n  init() {\n    this.setExpression = this.setExpression.bind(this);\n\n    const video = (document.querySelector(\n      \"#video\"\n    ) as unknown) as HTMLVideoElement;\n\n    Promise.all([loadModels(), connectCamera(video)]).then(() => {\n      this.data.object.setAttribute(\"visible\", true);\n      this.data.hud.setAttribute(\"value\", \"move phone from side to side\");\n\n      // First run\n      getExpression(video).then(this.setExpression);\n\n      // Schedule detections.\n      setInterval(\n        () => getExpression(video).then(this.setExpression),\n        DEFAULT_DETECTIONS_TIME\n      );\n    });\n  },\n\n  setExpression(expression: FaceExpression | null) {\n    const clip = expression === \"happy\" ? \"Wave\" : \"Idle\";\n    this.data.object.setAttribute(\"animation-mixer\", { clip });\n  },\n};\n\nconst loadModels = async (): Promise<void> => {\n  await Promise.all([\n    faceapi.nets.tinyFaceDetector.loadFromUri(MODELS_DIRECTORY),\n    faceapi.nets.faceExpressionNet.loadFromUri(MODELS_DIRECTORY),\n  ]);\n};\n\nconst getExpression = async (\n  video: HTMLVideoElement\n): Promise<FaceExpression | null> => {\n  const detection = await faceapi\n    .detectSingleFace(video, faceDetectorOptions)\n    .withFaceExpressions();\n\n  const expression = detection?.expressions.asSortedArray()[0];\n\n  return (expression?.expression as FaceExpression) || null;\n};\n\nconst connectCamera = async (video: HTMLVideoElement): Promise<void> => {\n  await navigator.mediaDevices\n    .getUserMedia({ video: { facingMode: \"user\" } })\n    .then((stream) => {\n      video.srcObject = stream;\n      return \"connected\" as \"connected\";\n    });\n\n  return new Promise((resolve) => {\n    video.addEventListener(\"loadeddata\", () => resolve());\n  });\n};\n\nAFRAME.registerComponent(\"face-api\", FaceApiComponent);\n","import React from \"react\";\n\nconst zeetAsset = `${process.env.PUBLIC_URL}/assets/zeet/zeet.gltf`;\n\nconst Assets: React.FunctionComponent = () => {\n  return (\n    <a-assets>\n      <a-asset-item id=\"zeet\" src={zeetAsset}></a-asset-item>\n    </a-assets>\n  );\n};\n\nexport default Assets;\n","import React from \"react\";\nimport { Scene, Entity } from \"aframe-react\";\nimport { createGlobalStyle } from \"styled-components\";\n\nimport Assets from \"./components/Assets\";\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    font-family: 'Open Sans', sans-serif;\n  }\n`;\n\nconst App: React.FunctionComponent = () => {\n  return (\n    <>\n      <GlobalStyle />\n      <video id=\"video\" autoPlay muted playsInline />\n      <Scene\n        world-tracking-hack\n        ar=\"worldSensing: true\"\n        raycaster-move=\"target:#mark\"\n        place-on-click=\"mark: #mark; object: #object; shadowPlane: #shadow-plane; camera: #camera\"\n        face-api=\"object: #object; hud: #hud\"\n      >\n        <Assets />\n\n        <Entity\n          ar-raycaster=\"\"\n          raycaster=\"objects: none\"\n          mark-mover=\"mark: #mark\"\n        />\n\n        <a-ring\n          id=\"mark\"\n          rotation=\"-90 0 0\"\n          radius-inner=\"0.01\"\n          radius-outer=\"0.02\"\n        ></a-ring>\n\n        <Entity\n          id=\"object\"\n          position=\"0 0 -2\"\n          gltf-model=\"#zeet\"\n          animation-mixer=\"clip: Idle\"\n          shadow=\"receive: false; cast: true\"\n          visible=\"false\"\n        />\n\n        <Entity\n          id=\"shadow-plane\"\n          geometry=\"primitive: plane; height: 1; width: 1\"\n          rotation=\"-90 0 0\"\n          shadow=\"receive: true; cast: false\"\n          ar-shadows=\"opacity: 0.3\"\n          visible=\"false\"\n        />\n\n        <Entity id=\"ambient-light\" light=\"type: ambient; intensity: 0.5;\" />\n\n        <a-light\n          id=\"directional-light\"\n          type=\"directional\"\n          light=\"castShadow: true;\n                 shadowMapHeight: 1024;\n                 shadowMapWidth: 1024;\n                 shadowCameraLeft: -7;\n                 shadowCameraRight: 5;\n                 shadowCameraBottom: -5;\n                 shadowCameraTop: 5;\"\n          target=\"dino\"\n          position=\"-5 3 1.5\"\n        />\n\n        <Entity\n          id=\"environment\"\n          environment=\"preset: forest; lighting: none; shadow: none; lightPosition: 0 2.15 0\"\n          hide-in-ar-mode\n        />\n\n        <a-camera id=\"camera\">\n          <a-text\n            id=\"hud\"\n            align=\"center\"\n            wrap-count=\"800\"\n            position=\"0 -0.1 -0.25\"\n            value=\"loading...\"\n          ></a-text>\n        </a-camera>\n      </Scene>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"aframe-extras\";\nimport \"aframe-environment-component\";\nimport \"aframe-layout-component\";\nimport \"aframe-look-at-component\";\n\nimport \"./aframe/components/world-tracking-hack\";\nimport \"./aframe/components/marker-mover\";\nimport \"./aframe/components/raycaster-move\";\nimport \"./aframe/components/place-on-click\";\nimport \"./aframe/components/ar-shadows\";\nimport \"./aframe/components/hide-in-ar-mode\";\nimport \"./aframe/components/face-api\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}